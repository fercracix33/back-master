// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Modelo de Usuario
model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password      String
  // Relaciones
  notes         Note[]            // Notas propias del usuario
  folders       Folder[]          // Carpetas del usuario
  boards        Board[]           // Tableros (para tareas) del usuario
  chats         Chat[]            @relation("UserChats") // Conversaciones (chat) en las que participa
  messages      Message[]         @relation("UserMessages") // Mensajes enviados por el usuario
  notifications Notification[]    // Notificaciones del usuario
}

// Modelo de Nota
model Note {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  isPublic    Boolean  @default(false)  // true si la nota es pública (visible en la zona social)
  likes       Int      @default(0)      // contador de "me gustas" o valoraciones
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relaciones
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  folder      Folder?  @relation(fields: [folderId], references: [id])
  folderId    Int?
  // Para copiar notas: si un usuario copia una nota pública, se crea una nueva Note con su autorId
  messages    Message[]  // Mensajes que hacen referencia a esta nota
}

// Modelo de Carpeta (para organizar notas del usuario)
model Folder {
  id       Int    @id @default(autoincrement())
  name     String
  // Relaciones
  owner    User   @relation(fields: [ownerId], references: [id])
  ownerId  Int
  notes    Note[] // Notas dentro de esta carpeta
}

// Modelo de Tablero (p.ej. tablero Kanban de tareas)
model Board {
  id       Int     @id @default(autoincrement())
  title    String
  // Relaciones
  owner    User    @relation(fields: [ownerId], references: [id])
  ownerId  Int
  tasks    Task[]  // Tareas en este tablero
}

// Modelo de Tarea (pertenece a un tablero)
model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  done        Boolean  @default(false)    // estado de completado
  dueDate     DateTime?
  // Relaciones
  board       Board    @relation(fields: [boardId], references: [id])
  boardId     Int
}

// Modelo de Chat (conversación privada o grupal)
model Chat {
  id       Int       @id @default(autoincrement())
  name     String?   // nombre del chat (usar para grupos, puede ser null en chat privado)
  isGroup  Boolean   @default(false)
  createdAt DateTime @default(now())
  // Relaciones
  users    User[]    @relation("UserChats")   // Participantes (usuarios) en el chat (relación muchos a muchos)
  messages Message[] // Mensajes en el chat
}

// Modelo de Mensaje (dentro de un chat)
model Message {
  id        Int      @id @default(autoincrement())
  content   String
  fileUrl   String?  // (opcional) URL de archivo adjunto si lo hay
  createdAt DateTime @default(now())
  // Relaciones
  sender    User    @relation("UserMessages", fields: [senderId], references: [id])
  senderId  Int
  chat      Chat    @relation(fields: [chatId], references: [id])
  chatId    Int
  note      Note?   @relation(fields: [noteId], references: [id])  // (opcional) referencia a una nota enviada en el chat
  noteId    Int?
}

// Modelo de Notificación
model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  type      String?   // tipo de notificación (ej: "chat", "task", "social")
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  scheduledFor DateTime? // (opcional) momento programado para notificación futura
  // Relaciones
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  // (Opcionalmente podríamos añadir referenceId si queremos vincular a una entidad, e.g. id de nota o tarea relacionada con la notificación)
}
