datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// âœ… DefiniciÃ³n del estado de amistad
enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// âœ… Enum para tipos de recursos comunitarios
enum ResourceType {
  NOTE
  FILE
  FOLDER
}

// âœ… Enum de visibilidad de comunidad
enum CommunityVisibility {
  PUBLIC
  PRIVATE
}

// âœ… Enum para roles en la comunidad
enum CommunityRole {
  ADMIN
  MODERATOR
  MEMBER
}

// âœ… Modelo de Usuario
model User {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  password String
  notes    Note[]
  folders  Folder[]
  boards   Board[]
  chats    Chat[]    @relation("UserChats")
  messages Message[] @relation("UserMessages")

  notifications          Notification[]
  friendRequestsSent     FriendRequest[]        @relation("RequestsSent")
  friendRequestsReceived FriendRequest[]        @relation("RequestsReceived")
  ownedEvents            Event[]                @relation("EventOwner")
  events                 Event[]                @relation("EventParticipants")
  files                  File[]
  communityMemberships   CommunityMembership[]
  joinRequests           CommunityJoinRequest[]
  communityResources     CommunityResource[]
  threads                CommunityThread[]
  threadComments         ThreadComment[]
  ownedCommunities       Community[]            @relation("OwnedCommunities")
  scheduledNotifications ScheduledNotification[]
    friendships        Friendship[] @relation("UserFriends")
  friendsWithMe      Friendship[] @relation("FriendOf")
}

// âœ… Modelo de Nota
model Note {
  id        Int       @id @default(autoincrement())
  title     String
  content   String    @db.MediumText
  isPublic  Boolean   @default(false)
  likes     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  folder    Folder?   @relation(fields: [folderId], references: [id])
  folderId  Int?
  messages  Message[]
}

// âœ… Modelo de Carpeta
model Folder {
  id       Int      @id @default(autoincrement())
  name     String
  parent   Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  parentId Int?
  children Folder[] @relation("FolderHierarchy")
  owner    User     @relation(fields: [ownerId], references: [id])
  ownerId  Int
  notes    Note[]
  files    File[]
}

// âœ… Modelo de Archivo
model File {
  id        Int      @id @default(autoincrement())
  name      String
  path      String
  size      Int
  mimeType  String
  createdAt DateTime @default(now())
  folderId  Int?
  folder    Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  ownerId   Int
  owner     User     @relation(fields: [ownerId], references: [id])
}

// âœ… Modelo de Tablero (Kanban)
model Board {
  id      Int    @id @default(autoincrement())
  title   String
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId Int
  tasks   Task[]
}

// âœ… Modelo de Tarea
model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  done        Boolean   @default(false)
  dueDate     DateTime?
  tags        Json?
  board       Board     @relation(fields: [boardId], references: [id])
  boardId     Int
}

// âœ… Modelo de Chat
model Chat {
  id        Int       @id @default(autoincrement())
  name      String?
  isGroup   Boolean   @default(false)
  createdAt DateTime  @default(now())
  users     User[]    @relation("UserChats")
  messages  Message[]
}

// âœ… RelaciÃ³n bidireccional en Message
model Message {
  id        Int      @id @default(autoincrement())
  content   String
  fileUrl   String?
  createdAt DateTime @default(now())

  // Relaciones
  sender   User @relation("UserMessages", fields: [senderId], references: [id])
  senderId Int

  chat   Chat  @relation(fields: [chatId], references: [id])
  chatId Int
  note   Note? @relation(fields: [noteId], references: [id])
  noteId Int?
}

// âœ… Modelo de NotificaciÃ³n
model Notification {
  id           Int       @id @default(autoincrement())
  message      String
  type         NotificationType
  isRead       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  scheduledFor DateTime?
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
}

// âœ… Modelo de Solicitud de Amistad
model FriendRequest {
  id        Int          @id @default(autoincrement())
  from      User         @relation("RequestsSent", fields: [fromId], references: [id])
  fromId    Int
  to        User         @relation("RequestsReceived", fields: [toId], references: [id])
  toId      Int
  status    FriendStatus @default(PENDING)
  createdAt DateTime     @default(now())
}

// âœ… Modelo de Evento
model Event {
  id              Int      @id @default(autoincrement())
  title           String
  description     String?
  date            DateTime @db.Date
  startTime       String?
  endTime         String?
  category        String?
  color           String?
  reminderMinutes Int?     @default(1440)
  createdAt       DateTime @default(now())
  owner           User     @relation("EventOwner", fields: [ownerId], references: [id])
  ownerId         Int
  participants    User[]   @relation("EventParticipants")
}

// âœ… Modelo de Etiquetas
// âœ… RelaciÃ³n bidireccional en Tag
model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Relaciones bidireccionales
  communityTags CommunityTag[]
  resourceTags  CommunityResourceTag[]
}

// âœ… Modelos de Comunidad
// âœ… RelaciÃ³n bidireccional en Community
model Community {
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  description String?
  image       String?
  visibility  CommunityVisibility @default(PUBLIC)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  creatorId   Int
  creator     User                @relation("OwnedCommunities", fields: [creatorId], references: [id])

  members      CommunityMembership[]
  joinRequests CommunityJoinRequest[]
  resources    CommunityResource[]
  threads      CommunityThread[]
  tags         CommunityTag[]
}

// âœ… Modelo de Solicitudes para Unirse a Comunidades
model CommunityJoinRequest {
  id          Int       @id @default(autoincrement())
  userId      Int
  communityId Int
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  community   Community @relation(fields: [communityId], references: [id])

  @@unique([userId, communityId])
}

// âœ… Modelo de Recursos Comunitarios
model CommunityResource {
  id          Int                    @id @default(autoincrement())
  type        ResourceType
  resourceId  Int
  title       String
  description String?
  createdAt   DateTime               @default(now())
  authorId    Int
  author      User                   @relation(fields: [authorId], references: [id])
  communityId Int
  community   Community              @relation(fields: [communityId], references: [id])
  tags        CommunityResourceTag[] // ðŸ”¹ Se aÃ±adiÃ³ esta lÃ­nea para relacionar con etiquetas
}

// âœ… Modelo de Miembros de Comunidad
model CommunityMembership {
  id          Int           @id @default(autoincrement())
  userId      Int
  communityId Int
  role        CommunityRole @default(MEMBER)
  joinedAt    DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id])
  community   Community     @relation(fields: [communityId], references: [id])

  @@unique([userId, communityId])
}

// âœ… Modelo de Hilos de DiscusiÃ³n en Comunidades
model CommunityThread {
  id          Int             @id @default(autoincrement())
  title       String
  content     String          @db.MediumText
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  authorId    Int
  author      User            @relation(fields: [authorId], references: [id])
  communityId Int
  community   Community       @relation(fields: [communityId], references: [id])
  comments    ThreadComment[]
}

// âœ… Modelo de Comentarios en Hilos de Comunidad
model ThreadComment {
  id        Int             @id @default(autoincrement())
  content   String          @db.MediumText
  createdAt DateTime        @default(now())
  threadId  Int
  thread    CommunityThread @relation(fields: [threadId], references: [id])
  authorId  Int
  author    User            @relation(fields: [authorId], references: [id])
}

// âœ… Modelo de RelaciÃ³n entre Recursos Comunitarios y Tags
// âœ… RelaciÃ³n bidireccional en CommunityResourceTag
model CommunityResourceTag {
  id                  Int               @id @default(autoincrement())
  communityResource   CommunityResource @relation(fields: [communityResourceId], references: [id], onDelete: Cascade)
  communityResourceId Int
  tag                 Tag               @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId               Int

  @@unique([communityResourceId, tagId])
}

// âœ… Modelo de RelaciÃ³n entre Comunidades y Tags
// âœ… RelaciÃ³n bidireccional en CommunityTag
model CommunityTag {
  id          Int       @id @default(autoincrement())
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId       Int

  @@unique([communityId, tagId])
}


enum NotificationType {
  CHAT
  EVENT
  RESOURCE
  THREAD
  FRIEND
}


model ScheduledNotification {
  id           Int       @id @default(autoincrement())
  userId       Int
  message      String
  type         NotificationType
  scheduledFor DateTime
  sent         Boolean   @default(false)
  createdAt    DateTime  @default(now())

  user         User      @relation(fields: [userId], references: [id])
}

model Friendship {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  createdAt DateTime @default(now())

  user      User     @relation("UserFriends", fields: [userId], references: [id])
  friend    User     @relation("FriendOf", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}
