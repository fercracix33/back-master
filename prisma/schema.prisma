datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Definición del estado de amistad
enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// Modelo de Usuario
model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password      String
  // Relaciones
  notes         Note[]            // Notas propias del usuario
  folders       Folder[]          // Carpetas del usuario
  boards        Board[]           // Tableros (para tareas) del usuario
  chats         Chat[]            @relation("UserChats")
  messages      Message[]         @relation("UserMessages")
  notifications Notification[]    // Notificaciones del usuario
  friendRequestsSent   FriendRequest[] @relation("RequestsSent")
  friendRequestsReceived FriendRequest[] @relation("RequestsReceived")
  ownedEvents   Event[]          @relation("EventOwner")
  events        Event[]          @relation("EventParticipants")
  files         File[]           // ✅ Archivos subidos por el usuario
}

// Modelo de Nota
model Note {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.MediumText
  isPublic  Boolean  @default(false)
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relaciones
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  folder    Folder?  @relation(fields: [folderId], references: [id])
  folderId  Int?
  messages  Message[]  // Mensajes que hacen referencia a esta nota
}

// Modelo de Carpeta (para organizar notas del usuario)
// Modelo de Carpeta (para organizar archivos y notas)
model Folder {
  id       Int      @id @default(autoincrement())
  name     String
  parent   Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  parentId Int?
  children Folder[] @relation("FolderHierarchy")
  // Relaciones
  owner    User     @relation(fields: [ownerId], references: [id])
  ownerId  Int
  notes    Note[]   // Notas dentro de esta carpeta
  files    File[]   // Archivos dentro de esta carpeta
}

// Modelo de Archivo
model File {
  id         Int      @id @default(autoincrement())
  name       String
  path       String   // Ruta de almacenamiento
  size       Int      // Tamaño en bytes
  mimeType   String   // Tipo MIME (ej. "image/png", "application/pdf")
  createdAt  DateTime @default(now())
  folderId   Int?     // Puede estar en una carpeta o en la raíz
  folder     Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  ownerId    Int
  owner      User     @relation(fields: [ownerId], references: [id]) // ✅ Relación con el usuario
}


// Modelo de Tablero (Kanban de tareas)
model Board {
  id       Int     @id @default(autoincrement())
  title    String
  // Relaciones
  owner    User    @relation(fields: [ownerId], references: [id])
  ownerId  Int
  tasks    Task[]  // Tareas en este tablero
}

// Modelo de Tarea
model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  done        Boolean  @default(false)
  dueDate     DateTime?
  tags        Json?
  // Relaciones
  board       Board    @relation(fields: [boardId], references: [id])
  boardId     Int
}

// Modelo de Chat (conversación privada o grupal)
model Chat {
  id         Int       @id @default(autoincrement())
  name       String?   // nombre del chat (null si es chat privado)
  isGroup    Boolean   @default(false)
  createdAt  DateTime  @default(now())
  // Relaciones
  users      User[]    @relation("UserChats")   // Participantes en el chat
  messages   Message[] // Mensajes en el chat
}

// Modelo de Mensaje (mensaje de chat)
model Message {
  id        Int      @id @default(autoincrement())
  content   String
  fileUrl   String?
  createdAt DateTime @default(now())
  // Relaciones
  sender    User    @relation("UserMessages", fields: [senderId], references: [id])
  senderId  Int
  chat      Chat    @relation(fields: [chatId], references: [id])
  chatId    Int
  note      Note?   @relation(fields: [noteId], references: [id])
  noteId    Int?
}

// Modelo de Notificación
model Notification {
  id          Int      @id @default(autoincrement())
  message     String
  type        String?   // tipo de notificación (ej: "chat", "task", "social", "friend", "event")
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  scheduledFor DateTime?
  // Relaciones
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  // (Opcional: referenceId para vincular a entidad relacionada)
}

// Modelo de Solicitud de Amistad
model FriendRequest {
  id        Int          @id @default(autoincrement())
  from      User         @relation("RequestsSent", fields: [fromId], references: [id])
  fromId    Int
  to        User         @relation("RequestsReceived", fields: [toId], references: [id])
  toId      Int
  status    FriendStatus @default(PENDING)
  createdAt DateTime     @default(now())
}

// Modelo de Evento del Calendario
model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  date        DateTime  @db.Date      // solo fecha (YYYY-MM-DD)
  startTime   String?
  endTime     String?
  category    String?
  color       String?
  reminderMinutes Int?  @default(1440) // minutos de antelación para aviso (1440 = 1 día)
  createdAt   DateTime  @default(now())
  // Relaciones
  owner       User      @relation("EventOwner", fields: [ownerId], references: [id])
  ownerId     Int
  participants User[]   @relation("EventParticipants")
}
