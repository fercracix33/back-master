datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ✅ Definición del estado de amistad
enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// ✅ Enum para tipos de recursos comunitarios
enum ResourceType {
  NOTE
  FILE
  FOLDER
}

// ✅ Enum de visibilidad de comunidad
enum CommunityVisibility {
  PUBLIC
  PRIVATE
}

// ✅ Enum para roles en la comunidad
enum CommunityRole {
  ADMIN
  MODERATOR
  MEMBER
}

// ✅ Modelo de Usuario
model User {
  id                      Int                 @id @default(autoincrement())
  name                    String
  email                   String              @unique
  password                String
  notes                   Note[]
  folders                 Folder[]
  boards                  Board[]
  chats                   Chat[]              @relation("UserChats")
  messages                Message[]           @relation("UserMessages")
  notifications           Notification[]
  friendRequestsSent      FriendRequest[]     @relation("RequestsSent")
  friendRequestsReceived  FriendRequest[]     @relation("RequestsReceived")
  ownedEvents             Event[]             @relation("EventOwner")
  events                  Event[]             @relation("EventParticipants")
  files                   File[]
  communityMemberships    CommunityMembership[]
  joinRequests            CommunityJoinRequest[]
  communityResources      CommunityResource[]
  threads                 CommunityThread[]
  threadComments          ThreadComment[]
}

// ✅ Modelo de Nota
model Note {
  id          Int       @id @default(autoincrement())
  title       String
  content     String    @db.MediumText
  isPublic    Boolean   @default(false)
  likes       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  folder      Folder?   @relation(fields: [folderId], references: [id])
  folderId    Int?
  messages    Message[]
}

// ✅ Modelo de Carpeta
model Folder {
  id          Int      @id @default(autoincrement())
  name        String
  parent      Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  parentId    Int?
  children    Folder[] @relation("FolderHierarchy")
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     Int
  notes       Note[]
  files       File[]
}

// ✅ Modelo de Archivo
model File {
  id          Int       @id @default(autoincrement())
  name        String
  path        String
  size        Int
  mimeType    String
  createdAt   DateTime  @default(now())
  folderId    Int?
  folder      Folder?   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  ownerId     Int
  owner       User      @relation(fields: [ownerId], references: [id])
}

// ✅ Modelo de Solicitud de Amistad
model FriendRequest {
  id        Int          @id @default(autoincrement())
  from      User         @relation("RequestsSent", fields: [fromId], references: [id])
  fromId    Int
  to        User         @relation("RequestsReceived", fields: [toId], references: [id])
  toId      Int
  status    FriendStatus @default(PENDING)
  createdAt DateTime     @default(now())
}

// ✅ Modelo de Notificación
model Notification {
  id            Int       @id @default(autoincrement())
  message       String
  type          String?
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  scheduledFor  DateTime?
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
}

// ✅ Modelo de Evento
model Event {
  id              Int      @id @default(autoincrement())
  title           String
  description     String?
  date            DateTime @db.Date
  startTime       String?
  endTime         String?
  category        String?
  color           String?
  reminderMinutes Int?     @default(1440)
  createdAt       DateTime @default(now())
  owner           User     @relation("EventOwner", fields: [ownerId], references: [id])
  ownerId         Int
  participants    User[]   @relation("EventParticipants")
}

// ✅ Modelo de Etiquetas
model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique
}

// ✅ Modelos de Comunidad
model Community {
  id           Int                  @id @default(autoincrement())
  name         String               @unique
  description  String?
  image        String?
  visibility   CommunityVisibility  @default(PUBLIC)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  creatorId    Int
  creator      User                 @relation(fields: [creatorId], references: [id])
  members      CommunityMembership[]
  joinRequests CommunityJoinRequest[]
  resources    CommunityResource[]
  threads      CommunityThread[]
  tags         CommunityTag[]
}

// ✅ Modelo de Miembros de Comunidad
model CommunityMembership {
  id          Int           @id @default(autoincrement())
  userId      Int
  communityId Int
  role        CommunityRole @default(MEMBER)
  joinedAt    DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id])
  community   Community     @relation(fields: [communityId], references: [id])
  @@unique([userId, communityId])
}

// ✅ Modelo de Solicitudes para Unirse a Comunidad
model CommunityJoinRequest {
  id          Int       @id @default(autoincrement())
  userId      Int
  communityId Int
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  community   Community @relation(fields: [communityId], references: [id])
  @@unique([userId, communityId])
}

// ✅ Modelo de Recursos Comunitarios
model CommunityResource {
  id           Int           @id @default(autoincrement())
  type         ResourceType
  resourceId   Int
  title        String
  description  String?
  createdAt    DateTime      @default(now())
  authorId     Int
  author       User          @relation(fields: [authorId], references: [id])
  communityId  Int
  community    Community     @relation(fields: [communityId], references: [id])
  tags         CommunityResourceTag[]
}

// ✅ Modelo de Hilos de Discusión
model CommunityThread {
  id          Int            @id @default(autoincrement())
  title       String
  content     String         @db.MediumText
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  authorId    Int
  author      User           @relation(fields: [authorId], references: [id])
  communityId Int
  community   Community      @relation(fields: [communityId], references: [id])
  comments    ThreadComment[]
}

// ✅ Modelo de Comentarios en Hilos
model ThreadComment {
  id        Int @id @default(autoincrement())
  content   String @db.MediumText
  createdAt DateTime @default(now())
  threadId  Int
  thread    CommunityThread @relation(fields: [threadId], references: [id])
  authorId  Int
  author    User @relation(fields: [authorId], references: [id])
}
